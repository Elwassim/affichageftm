#!/usr/bin/env node

/**
 * Script de v√©rification pour le d√©ploiement en production
 * CGT FTM Dashboard
 */

const fs = require("fs");
const path = require("path");

console.log("üîç CGT FTM Dashboard - V√©rification Production");
console.log("================================================");

const checks = [];

// V√©rifier les fichiers essentiels
const essentialFiles = [
  "dist/index.html",
  "dist/assets",
  "PRODUCTION_DATABASE_SETUP.sql",
  "DEPLOYMENT_CHECKLIST.md",
  "README.md",
];

essentialFiles.forEach((file) => {
  if (fs.existsSync(file)) {
    checks.push(`‚úÖ ${file}`);
  } else {
    checks.push(`‚ùå ${file} MANQUANT`);
  }
});

// V√©rifier package.json
if (fs.existsSync("package.json")) {
  const pkg = JSON.parse(fs.readFileSync("package.json", "utf8"));
  checks.push(`‚úÖ Package: ${pkg.name}@${pkg.version}`);

  // V√©rifier les scripts essentiels
  const scripts = ["build", "dev", "preview"];
  scripts.forEach((script) => {
    if (pkg.scripts && pkg.scripts[script]) {
      checks.push(`‚úÖ Script: ${script}`);
    } else {
      checks.push(`‚ùå Script manquant: ${script}`);
    }
  });
}

// V√©rifier la structure des composants
const componentPaths = [
  "src/components/dashboard",
  "src/components/admin",
  "src/pages",
  "src/lib",
];

componentPaths.forEach((dir) => {
  if (fs.existsSync(dir)) {
    const files = fs.readdirSync(dir);
    checks.push(`‚úÖ ${dir} (${files.length} fichiers)`);
  } else {
    checks.push(`‚ùå ${dir} MANQUANT`);
  }
});

// Afficher les r√©sultats
console.log("\nüìã R√©sultats de v√©rification:");
checks.forEach((check) => console.log(check));

// V√©rifier la taille du build
if (fs.existsSync("dist")) {
  const getDirectorySize = (dir) => {
    let size = 0;
    const files = fs.readdirSync(dir);
    files.forEach((file) => {
      const filePath = path.join(dir, file);
      const stats = fs.statSync(filePath);
      if (stats.isDirectory()) {
        size += getDirectorySize(filePath);
      } else {
        size += stats.size;
      }
    });
    return size;
  };

  const buildSize = getDirectorySize("dist");
  const buildSizeMB = (buildSize / 1024 / 1024).toFixed(2);
  console.log(`\nüìä Taille du build: ${buildSizeMB} MB`);
}

console.log("\nüöÄ Instructions de d√©ploiement:");
console.log("1. Configurer Supabase avec PRODUCTION_DATABASE_SETUP.sql");
console.log(
  "2. D√©finir les variables VITE_SUPABASE_URL et VITE_SUPABASE_ANON_KEY",
);
console.log("3. D√©ployer le dossier ./dist/ sur votre h√©bergeur");
console.log("4. Acc√©der au dashboard: / et √† l'admin: /admin");

const hasErrors = checks.some((check) => check.includes("‚ùå"));
if (hasErrors) {
  console.log(
    "\n‚ö†Ô∏è  Des erreurs ont √©t√© d√©tect√©es. Veuillez les corriger avant le d√©ploiement.",
  );
  process.exit(1);
} else {
  console.log(
    "\n‚úÖ Toutes les v√©rifications sont pass√©es. Pr√™t pour le d√©ploiement!",
  );
  process.exit(0);
}
