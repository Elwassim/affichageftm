import { supabase } from "./supabase";

export interface SyncResult {
  success: boolean;
  message: string;
  details?: any;
}

// V√©rifier si les nouvelles tables existent
export const checkPermanencesMigration = async (): Promise<boolean> => {
  if (!supabase) return false;

  try {
    // V√©rifier si la table permanence_categories existe
    const { data, error } = await supabase
      .from("permanence_categories")
      .select("count", { count: "exact", head: true });

    return !error;
  } catch (error) {
    console.log("Migration check failed:", error);
    return false;
  }
};

// Ex√©cuter la migration compl√®te
export const executePermanencesMigration = async (): Promise<SyncResult> => {
  if (!supabase) {
    return {
      success: false,
      message: "Supabase non configur√©",
    };
  }

  try {
    console.log("üöÄ D√©but de la migration des permanences...");

    // √âtape 1: V√©rifier si d√©j√† migr√©
    const alreadyMigrated = await checkPermanencesMigration();
    if (alreadyMigrated) {
      return {
        success: true,
        message: "Migration d√©j√† effectu√©e",
        details: { step: "already_done" },
      };
    }

    // √âtape 2: Ex√©cuter les requ√™tes de migration une par une
    const migrationSteps = [
      // Cr√©er la nouvelle table permanences
      `CREATE TABLE IF NOT EXISTS permanences (
        id UUID DEFAULT gen_random_uuid() PRIMARY KEY,
        name VARCHAR(255) NOT NULL,
        type VARCHAR(20) NOT NULL CHECK (type IN ('technique', 'politique')),
        category VARCHAR(50) NOT NULL,
        month VARCHAR(20) NOT NULL,
        year INTEGER NOT NULL DEFAULT EXTRACT(YEAR FROM CURRENT_DATE),
        days JSONB NOT NULL DEFAULT '{}',
        description TEXT,
        created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
        updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
      )`,

      // Cr√©er les index
      `CREATE INDEX IF NOT EXISTS idx_permanences_type ON permanences(type)`,
      `CREATE INDEX IF NOT EXISTS idx_permanences_month_year ON permanences(month, year)`,
      `CREATE INDEX IF NOT EXISTS idx_permanences_name ON permanences(name)`,

      // Cr√©er la table des cat√©gories
      `CREATE TABLE IF NOT EXISTS permanence_categories (
        id UUID DEFAULT gen_random_uuid() PRIMARY KEY,
        type VARCHAR(20) NOT NULL,
        code VARCHAR(10) NOT NULL,
        label VARCHAR(100) NOT NULL,
        color VARCHAR(7) DEFAULT '#3b82f6',
        description TEXT,
        UNIQUE(type, code)
      )`,
    ];

    // Ex√©cuter chaque √©tape
    for (let i = 0; i < migrationSteps.length; i++) {
      console.log(`üìã √âtape ${i + 1}/${migrationSteps.length}`);
      const { error } = await supabase.rpc("exec_sql", {
        sql: migrationSteps[i],
      });

      if (error) {
        console.error(`Erreur √©tape ${i + 1}:`, error);
        // Continuer m√™me en cas d'erreur (table peut d√©j√† exister)
      }
    }

    // √âtape 3: Ins√©rer les cat√©gories
    await insertDefaultCategories();

    // √âtape 4: Ins√©rer des donn√©es d'exemple
    await insertSamplePermanences();

    // √âtape 5: Configurer les permissions
    await setupPermissions();

    console.log("‚úÖ Migration termin√©e avec succ√®s!");

    return {
      success: true,
      message: "Migration des permanences effectu√©e avec succ√®s",
      details: { steps: migrationSteps.length },
    };
  } catch (error) {
    console.error("üí• Erreur migration:", error);
    return {
      success: false,
      message: `Erreur lors de la migration: ${error}`,
      details: error,
    };
  }
};

// Ins√©rer les cat√©gories par d√©faut
const insertDefaultCategories = async () => {
  const categories = [
    {
      type: "technique",
      code: "P",
      label: "Permanences",
      color: "#3b82f6",
      description: "Permanences normales",
    },
    {
      type: "technique",
      code: "PAR",
      label: "Cong√©s Parental",
      color: "#ec4899",
      description: "Cong√©s parental",
    },
    {
      type: "technique",
      code: "MAL",
      label: "Maladie",
      color: "#ef4444",
      description: "Arr√™t maladie",
    },
    {
      type: "technique",
      code: "RTT",
      label: "RTT",
      color: "#10b981",
      description: "R√©duction du temps de travail",
    },
    {
      type: "technique",
      code: "REC",
      label: "R√©cup√©ration",
      color: "#f59e0b",
      description: "R√©cup√©ration",
    },
    {
      type: "technique",
      code: "CP",
      label: "Cong√©s Pay√©s",
      color: "#8b5cf6",
      description: "Cong√©s pay√©s",
    },
    {
      type: "technique",
      code: "FER",
      label: "F√©ri√©",
      color: "#6b7280",
      description: "Jour f√©ri√©",
    },
  ];

  try {
    const { error } = await supabase!
      .from("permanence_categories")
      .upsert(categories, { onConflict: "type,code" });

    if (error) {
      console.error("Erreur insertion cat√©gories:", error);
    } else {
      console.log("‚úÖ Cat√©gories ins√©r√©es");
    }
  } catch (error) {
    console.error("Erreur upsert cat√©gories:", error);
  }
};

// Ins√©rer des permanences d'exemple
const insertSamplePermanences = async () => {
  const samplePermanences = [
    {
      name: "BINET, MAGALI",
      type: "technique",
      category: "P",
      month: "juillet",
      year: 2025,
      days: { "2": "P", "14": "FER" },
      description: "Permanences standard",
    },
    {
      name: "GALLOIS, FATIMA",
      type: "technique",
      category: "RTT",
      month: "juillet",
      year: 2025,
      days: { "14": "FER", "18": "RTT" },
      description: "RTT juillet",
    },
    {
      name: "LETELLIER, VIRGINIE",
      type: "technique",
      category: "CP",
      month: "juillet",
      year: 2025,
      days: {
        "2": "P",
        "14": "FER",
        "22": "CP",
        "23": "CP",
        "24": "CP",
        "25": "CP",
      },
      description: "Cong√©s pay√©s √©t√©",
    },
  ];

  try {
    const { error } = await supabase!
      .from("permanences")
      .upsert(samplePermanences, { onConflict: "id" });

    if (error) {
      console.error("Erreur insertion permanences:", error);
    } else {
      console.log("‚úÖ Permanences d'exemple ins√©r√©es");
    }
  } catch (error) {
    console.error("Erreur upsert permanences:", error);
  }
};

// Configurer les permissions RLS
const setupPermissions = async () => {
  try {
    // Activer RLS si ce n'est pas fait
    await supabase!.rpc("exec_sql", {
      sql: "ALTER TABLE permanences ENABLE ROW LEVEL SECURITY",
    });

    await supabase!.rpc("exec_sql", {
      sql: "ALTER TABLE permanence_categories ENABLE ROW LEVEL SECURITY",
    });

    // Cr√©er les politiques de lecture publique
    await supabase!.rpc("exec_sql", {
      sql: `CREATE POLICY IF NOT EXISTS "Allow public read permanences" ON permanences FOR SELECT USING (true)`,
    });

    await supabase!.rpc("exec_sql", {
      sql: `CREATE POLICY IF NOT EXISTS "Allow public read categories" ON permanence_categories FOR SELECT USING (true)`,
    });

    console.log("‚úÖ Permissions configur√©es");
  } catch (error) {
    console.error("Erreur permissions:", error);
  }
};

// Fonction principale de synchronisation
export const syncPermanencesWithDB = async (): Promise<SyncResult> => {
  console.log("üîÑ D√©but de la synchronisation des permanences...");

  // V√©rifier si migration n√©cessaire
  const needsMigration = !(await checkPermanencesMigration());

  if (needsMigration) {
    console.log("üìã Migration n√©cessaire, ex√©cution...");
    return await executePermanencesMigration();
  }

  // Si d√©j√† migr√©, juste v√©rifier la connexion
  try {
    const { data, error } = await supabase!
      .from("permanences")
      .select("count", { count: "exact", head: true });

    if (error) {
      return {
        success: false,
        message: `Erreur de connexion: ${error.message}`,
        details: error,
      };
    }

    return {
      success: true,
      message: "Synchronisation r√©ussie - Base de donn√©es op√©rationnelle",
      details: { count: data },
    };
  } catch (error) {
    return {
      success: false,
      message: `Erreur de synchronisation: ${error}`,
      details: error,
    };
  }
};
